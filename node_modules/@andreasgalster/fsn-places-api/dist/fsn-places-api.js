'use strict';

require('@polymer/polymer/polymer.html');
require('@polymer/google-apis/google-maps-api.html');

Polymer({

  is: 'fsn-places-api',

  properties: {

    apiKey: String,
    inputValue: {
      type: String,
      notify: true,
      observer: 'getPrediction'
    },
    results: {
      type: Array,
      notify: true
    }
  },

  // reflectToAttribute: true
  mapsLoaded: function mapsLoaded() {
    this.service = new google.maps.places.AutocompleteService();
  },

  getPrediction: function getPrediction() {
    var _this = this;

    if (!this.$$('google-maps-api').libraryLoaded) {
      return;
    }
    var options = {
      input: this.inputValue,
      types: ['(cities)']
    };

    var displaySuggestions = function displaySuggestions(predictions, status) {
      if (status !== 'OK') {
        // if (status != google.maps.places.PlacesServiceStatus.OK) {
        return;
      }

      var results = [];
      predictions.forEach(function (prediction) {
        results.push({
          cityname: prediction.terms[0].value,
          // cityname: prediction.description,
          cityid: prediction.place_id
        });
      });
      _this.results = results;
    };

    this.service.getPlacePredictions(options, displaySuggestions);
  }
});