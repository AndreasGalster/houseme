'use strict';

require('@polymer/polymer/polymer.html');

require('@polymer/iron-icon/iron-icon.html');
require('@polymer/iron-flex-layout/iron-flex-layout.html');

require('@polymer/paper-input/paper-textarea.html');
require('@polymer/paper-button/paper-button.html');

var moment = require('moment');

require('@andreasgalster/fsn-boilerplate/dist/fsn-boilerplate.html');

Polymer({
  is: 'fsn-messaging-input',
  properties: {
    small: {
      type: Boolean,
      value: false
    },
    public: {
      type: Boolean,
      value: false
    },
    private: {
      type: Boolean,
      value: false
    },
    fromUserId: String,
    toUserId: String,
    message: String,
    messageId: String,
    chatId: String,
    userSelected: Boolean
  },

  sendMessage: function sendMessage(event) {
    var _this = this;

    var keycode = event.keyCode ? event.keyCode : event.which;
    if (keycode == '13' || event.type === 'tap' && this.message.length > 0) {
      this.fromUserId = Meteor.userId();

      if (!this.chatId) {
        var chatId = null;
      } else {
        var chatId = this.chatId;
      }

      if (this.public) {
        Meteor.call('sendPublicMessage', this.fromUserId, chatId, this.message, function () {
          return _this.message = '';
        });
      } else {

        // if(this.messageId && !this.userSelected) {
        // if the user is selected set userSelected prop to true
        // does not use the messageId
        if (this.userSelected) {
          console.log('inserting into new');
          Meteor.call('sendPrivateMessage', this.fromUserId, this.toUserId, this.messageId, this.message, true, function (err, res) {
            _this.message = '';
            _this.fire('user-selected-false');
            console.log(res);
            _this.fire('messageId', res);
          });
        } else if (!this.userSelected) {
          // } else if (this.toUserId && this.userSelected) {
          // if the user is not selected set userSelected prop to false
          // use the messageId
          console.log('inserting into existing');
          Meteor.call('sendPrivateMessage', this.fromUserId, this.toUserId, this.messageId, this.message, false, function () {
            _this.message = '';
          });
        } else {
          console.log('cannot send a message, no user or message selected');
          this.message = '';
        }
      }

      if (chatId) {
        this.chatId = chatId._id;
      }

      this.fire('fsn-message-sent');
    }
  }

});