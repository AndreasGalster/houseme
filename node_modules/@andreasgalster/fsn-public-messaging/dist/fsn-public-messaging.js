'use strict';

require('@polymer/polymer/polymer.html');

require('@polymer/iron-list/iron-list.html');
require('@polymer/iron-scroll-threshold/iron-scroll-threshold.html');

require('@polymer/paper-button/paper-button.html');
require('@polymer/paper-card/paper-card.html');
require('@polymer/paper-item/paper-item.html');

// require('../../fsn-messaging-input/dist/fsn-messaging-input.html');

require('@andreasgalster/fsn-messaging-input/dist/fsn-messaging-input.html');
require('@andreasgalster/fsn-boilerplate/dist/fsn-boilerplate.html');
require('@andreasgalster/fsn-icons/dist/fsn-icons.html');

Polymer({
  is: 'fsn-public-messaging',
  behaviors: [mwcMixin],
  properties: {
    user: {
      type: Object
    },
    publicMessages: {
      type: Array,
      observer: 'clearScroll'
    },
    loggedIn: {
      type: Boolean
    },
    limiter: {
      type: Number,
      value: 8,
      observer: 'subscribeData'
    }
  },

  // availableMessages: function(messages) {
  //   return messages.length === 0;
  // },
  // Subscribe to data. Once data is ready, set dynamic meta tags
  subscribeData: function subscribeData() {
    this.subscribe('usersTeaserAll');
    this.subscribe('PublicMessages', this.limiter);
  },
  clearScroll: function clearScroll() {
    if (this.$$('iron-scroll-threshold')) {
      this.$$('iron-scroll-threshold').clearTriggers();
    }
  },
  hasManyMessages: function hasManyMessages(messages) {
    return messages.length < 4;
  },
  loadFullConversation: function loadFullConversation(e) {
    e.model.set('item.messages.limit', 1000);

    // Tell list to resize to fit the expanded card
    this.$$('iron-list').notifyResize();
  },
  limitMessages: function limitMessages(change) {
    var limit = change.path === 'item.messages.limit' ? change.value : 3;
    return change.base.slice(0, limit);
  },
  isFirst: function isFirst(index) {
    return index == 0;
  },
  loadMoreData: function loadMoreData() {
    console.log('scroll end');
    this.limiter += 8;
  },
  tracker: function tracker() {
    this.publicMessages = PublicMessages.find({}, { sort: { dateCreated: -1 } }).fetch();

    var user = Meteor.user();
    this.user = user;
    this.loggedIn = user != null;
    this.users = Meteor.users.find().fetch();
  },
  sendMessage: function sendMessage(e) {
    this.otherUserId = e.model.item._id;
  },
  getImage: function getImage(fromUserId) {
    var user = Meteor.users.findOne({ _id: fromUserId });
    return user.services.facebook.id;
  },
  getName: function getName(fromUserId) {
    var user = Meteor.users.findOne({ _id: fromUserId });
    return user.services.facebook.first_name;
  }

});