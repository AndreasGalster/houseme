'use strict';

require('@polymer/polymer/polymer.html');
require('@polymer/paper-input/paper-input.html');
require('@polymer/paper-icon-button/paper-icon-button.html');
require('@polymer/paper-item/paper-item.html');
require('@polymer/paper-ripple/paper-ripple.html');
require('@polymer/paper-material/paper-material.html');

require('@andreasgalster/fsn-boilerplate/dist/fsn-boilerplate.html');
require('@andreasgalster/fsn-places-api/dist/fsn-places-api.html');

Polymer({

  is: 'fsn-places-autocomplete',
  properties: {
    required: Boolean,
    /**
    * `label` Text to display as the input label
    */
    // value: String,
    value: {
      type: String,
      notify: true
    },

    /**
     * `label` Text to display as the input label
     */
    label: String,

    /**
     * `source` Array of objects with the options to execute the autocomplete feature
     */
    source: Array,

    /**
     * `searchProperty` Property of the source objects that will be used to execute
     * the autocomplete feature
     */
    searchProperty: String,
    firstSource: String,

    /**
     * `value` Selected object from the suggestions
     */
    selectedValue: {
      type: Object,
      notify: true
    },

    /**
     * `suggestionsInOverlay` Display the suggestions in an overlay above the next elements
     */
    suggestionsInOverlay: Boolean,

    /**
     * `suggestions` Array with the actual suggestions to display
     */
    suggestions: Array

  },
  computedString: function computedString(string) {
    if (!string) {
      return false;
    } else {
      return true;
    }
  },
  validate: function validate() {
    this.$$('paper-input').validate();
  },

  /**
   * Hide the suggestions wrapper
   */
  _hideSuggestionsWrapper: function _hideSuggestionsWrapper() {
    this.$.suggestionsWrapper.style.display = 'none';
  },

  /**
   * Event fired when the user types in the input field.
   *
   * @param {string} event fired
   */
  _handleSuggestions: function _handleSuggestions(event) {
    var value = event.target.value;

    if (value && value.length > 0) {

      // Search for the word in the source properties.
      if (this.source && this.source.length > 0) {
        this.suggestions = [];
        var length = this.source.length;
        for (var i = 0; i < length; i++) {
          var item = this.source[i].cityname;
          if (item.includes(value)) {
            // Adds the item to the suggestions list.
            this.push('suggestions', { text: item, value: value });
          }
        }

        if (this.suggestions.length > 0) {
          this.$.suggestionsWrapper.style.display = 'block';
        }
      }
    } else {
      this.suggestions = [];
    }
  },

  /**
   * Event fired when the user selects a suggestion
   * @param {Object} event fired
   */
  _selectFirstSuggestionBlur: function _selectFirstSuggestionBlur(e) {
    this._selectFirstSuggestion(e);
  },

  /**
   * Event fired when the user selects a suggestion
   * @param {Object} event fired
   */
  _selectFirstSuggestionKeydown: function _selectFirstSuggestionKeydown(e) {
    if (e.keyCode == 13 || e.keyCode == 9) {
      this._selectFirstSuggestion(e);
    }
  },

  /**
   * Event fired when the user selects a suggestion
   * @param {Object} event fired
   */
  _selectFirstSuggestion: function _selectFirstSuggestion(e) {
    var _this = this;

    // if(e.keyCode==13 || e.keyCode==9) {
    var selectedOption = this.suggestions[0];
    this.$.input.value = selectedOption.text;
    this.selectedValue = selectedOption.value;
    // this.$.input.blur();
    setTimeout(function () {
      _this._hideSuggestionsWrapper();
    }, 300);
    // }
  },

  /**
   * Event fired when the user selects a suggestion
   * @param {Object} event fired
   */
  _selectSuggestion: function _selectSuggestion(e) {
    var _this2 = this;

    var selectedOption = this.suggestions[e.model.index];
    this.$.input.value = selectedOption.text;
    this.selectedValue = selectedOption.value;
    // this.value = selectedOption.value;
    setTimeout(function () {
      _this2._hideSuggestionsWrapper();
    }, 300);
  },

  /**
   * Return the selected suggestion
   */
  getValue: function getValue() {
    return this.selectedValue;
  }

});