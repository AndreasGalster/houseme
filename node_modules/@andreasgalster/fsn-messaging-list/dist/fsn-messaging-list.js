'use strict';

require('@polymer/polymer/polymer.html');

require('@polymer/iron-list/iron-list.html');
require('@polymer/iron-scroll-threshold/iron-scroll-threshold.html');

require('@polymer/paper-button/paper-button.html');
require('@polymer/paper-listbox/paper-listbox.html');
require('@polymer/paper-item/paper-item.html');
require('@polymer/paper-item/paper-icon-item.html');

require('../../fb-user-image.html');
require('../../fb-user-name.html');

require('moment');

require('@andreasgalster/fsn-boilerplate/dist/fsn-boilerplate.html');

Polymer({
  is: 'fsn-messaging-list',
  behaviors: [mwcMixin],
  properties: {
    limiter: {
      type: Number,
      value: 8,
      observer: 'tracker'
    },
    messageId: {
      type: String,
      notify: true
    },
    toUserId: {
      type: String,
      value: '',
      notify: true
    },
    userSelected: {
      type: Boolean,
      value: false
    }
  },
  // listeners: {
  //   'user-selected-false': 'resetUserSelected'
  // },
  resetUserSelected: function resetUserSelected() {
    this.fire('user-selected-false');
    // userSelected = false;
    // this.userSelected = false;
  },
  attached: function attached() {
    // subscribes to users
    // retrieves facebook id and first_name
    this.subscribe('PrivateMessagesUsers');

    // subscribes to the list of message ids
    // does not contain facebook id or first_name
    this.subscribe('PrivateMessagesList');
  },
  // retrieves the messageId. the ID gets fetched to the chat
  getMessageId: function getMessageId(e) {
    // this.resetUserSelected();
    if (e.type === 'dom-change') {
      this.$$('paper-listbox').selected = 1;
      var firstItem = this.$$('paper-icon-item');

      this.messageId = e.target.modelForElement(firstItem).item.messageId;
      this.toUserId = e.target.modelForElement(firstItem).item.toUserId;
    } else if (e.type === 'tap') {
      this.messageId = e.model.item.messageId;
      this.toUserId = e.model.item.toUserId;

      this.selected = true;
      this.resetUserSelected();
    }
  },
  tracker: function tracker() {
    this.messages = PrivateMessagesList.find({}, { sort: { 'status.createdAt': -1 } }).fetch(); //runs every time status changes.
  },
  messagesAvailable: function messagesAvailable(messages) {
    if (messages.length > 0) {
      return true;
    }
  },
  loadMoreMessages: function loadMoreMessages() {
    this.limiter = this.limiter + 8;
    // ironScrollTheshold.clearTriggers();
  }

});