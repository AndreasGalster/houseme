'use strict';

require('@polymer/polymer/polymer.html');
require('@polymer/iron-selector/iron-selectable.html');

Polymer({

  is: 'fsn-meta-tags',

  behaviors: [Polymer.IronSelectableBehavior],

  properties: {},

  listeners: {
    'iron-deselect': '_itemDeselected',
    'iron-select': '_itemSelected'
  },

  _itemDeselected: function _itemDeselected(event) {
    console.log(event);
    // Do not listen to possible sub-selectors if these fired and iron-deselect
    if (event.target !== this) {
      return;
    }
  },

  _itemSelected: function _itemSelected(event) {
    console.log(event);
    // Do not listen to possible sub-selectors if these fired and iron-select
    if (event.target !== this) {
      return;
    }
  }

});

//
// Polymer({
//   is: 'fsn-meta-tag',
//   properties: {
//     defaultTitle: String,
//     title: {
//       type: String,
//       observer: 'setTitle'
//     },
//   },
//
//     setTitle(title) {
//       document.title = this.title;
//     },
//     addMeta(info) {
//       this._addTag(info, 'meta');
//     },
//     addLink(info) {
//       this._addTag(info, 'link');
//     },
//     _addTag(info, tag) {
//       const meta = this._buildTag(info, tag);
//       document.querySelector('head').insertAdjacentHTML('beforeend', meta);
//     },
//     _buildTag(metaInfo, type) {
//       let props = "";
//       for (let key in metaInfo) {
//         props += `${key}="${metaInfo[key]}" `;
//       }
//       props += 'dochead="1"';
//       var meta = `<${type} ${props}/>`;
//       return meta;
//     },
//     removeDocHeadAddedTags() {
//       if (Meteor.isClient) {
//         const elements = document.querySelectorAll('[dochead="1"]');
//         // We use for-of here to loop only over iterable objects
//         for (let element of elements) {
//           element.parentNode.removeChild(element);
//         }
//       }
//     }
//   };
//
//
//
//
//
//
//
//
//
//
// });